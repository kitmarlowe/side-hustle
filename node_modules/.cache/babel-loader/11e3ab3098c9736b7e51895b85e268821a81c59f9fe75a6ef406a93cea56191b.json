{"ast":null,"code":"// Importing necessary modules and components from React, CSS, and FontAwesome\nimport React,{useState,useEffect}from'react';import'./App.css';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faTrash}from'@fortawesome/free-solid-svg-icons';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){// State 'tasks' holds the list of tasks. 'setTasks' is used to update this list.\nconst[tasks,setTasks]=useState([]);// State 'task' holds the current value of the new task input field.\nconst[task,setTask]=useState('');// This effect runs once on component mount, loading tasks from local storage.\nuseEffect(()=>{const loadedTasks=localStorage.getItem('tasks');if(loadedTasks){setTasks(JSON.parse(loadedTasks));// Parse the string from local storage back into an array\n}},[]);// This effect runs whenever the 'tasks' state changes, saving tasks to local storage.\nuseEffect(()=>{localStorage.setItem('tasks',JSON.stringify(tasks));// Convert the 'tasks' array to a string and store it\n},[tasks]);// Function to handle adding a new task from the form submission.\nconst addTask=event=>{event.preventDefault();// Prevents the browser from refreshing when the form is submitted\nif(!task.trim())return;// Ignore empty tasks\nsetTasks([...tasks,{id:Date.now(),text:task,isEditing:false}]);setTask('');// Clear the input field after adding a task\n};// Function to update a task's text.\nconst editTask=(id,newText)=>{const updatedTasks=tasks.map(task=>{return task.id===id?{...task,text:newText}:task;});setTasks(updatedTasks);};// Function to enable editing mode for a task.\nconst startEditing=id=>{const updatedTasks=tasks.map(task=>{return task.id===id?{...task,isEditing:true}:task;});setTasks(updatedTasks);};// Function to save the edited task and disable editing mode.\nconst saveEdit=id=>{const updatedTasks=tasks.map(task=>{return task.id===id?{...task,isEditing:false}:task;});setTasks(updatedTasks);};// Function to cancel editing mode without saving the task.\nconst cancelEdit=id=>{const updatedTasks=tasks.map(task=>{return task.id===id?{...task,isEditing:false}:task;});setTasks(updatedTasks);};// Function to delete a task.\nconst deleteTask=id=>{setTasks(tasks.filter(task=>task.id!==id));// Remove the task from the list\n};// Rendering the component to the DOM\nreturn/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsxs(\"header\",{className:\"App-header\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"To-Do List\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:addTask,children:[/*#__PURE__*/_jsx(\"input\",{value:task,onChange:e=>setTask(e.target.value),type:\"text\",placeholder:\"Enter a new task\",autoFocus:true// Focus this input automatically when the form appears\n}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add\"})]}),/*#__PURE__*/_jsx(\"ul\",{children:tasks.map(task=>/*#__PURE__*/_jsxs(\"li\",{children:[task.isEditing?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:task.text,onChange:e=>editTask(task.id,e.target.value),autoFocus:true}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>saveEdit(task.id),children:\"Save\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>cancelEdit(task.id),children:\"Cancel\"})]}):/*#__PURE__*/_jsxs(\"div\",{children:[task.text,/*#__PURE__*/_jsx(\"button\",{onClick:()=>startEditing(task.id),children:\"Edit\"})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"delete\",onClick:()=>deleteTask(task.id),children:[/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faTrash}),\" \"]})]},task.id))})]})});}export default App;// Make this component available for import into other files","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faTrash","jsx","_jsx","jsxs","_jsxs","App","tasks","setTasks","task","setTask","loadedTasks","localStorage","getItem","JSON","parse","setItem","stringify","addTask","event","preventDefault","trim","id","Date","now","text","isEditing","editTask","newText","updatedTasks","map","startEditing","saveEdit","cancelEdit","deleteTask","filter","className","children","onSubmit","value","onChange","e","target","type","placeholder","autoFocus","onClick","icon"],"sources":["C:/xampp/htdocs/side-hustle/src/App.js"],"sourcesContent":["// Importing necessary modules and components from React, CSS, and FontAwesome\r\nimport React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nfunction App() {\r\n  // State 'tasks' holds the list of tasks. 'setTasks' is used to update this list.\r\n  const [tasks, setTasks] = useState([]);\r\n  // State 'task' holds the current value of the new task input field.\r\n  const [task, setTask] = useState('');\r\n\r\n  // This effect runs once on component mount, loading tasks from local storage.\r\n  useEffect(() => {\r\n    const loadedTasks = localStorage.getItem('tasks');\r\n    if (loadedTasks) {\r\n      setTasks(JSON.parse(loadedTasks)); // Parse the string from local storage back into an array\r\n    }\r\n  }, []);\r\n\r\n  // This effect runs whenever the 'tasks' state changes, saving tasks to local storage.\r\n  useEffect(() => {\r\n    localStorage.setItem('tasks', JSON.stringify(tasks)); // Convert the 'tasks' array to a string and store it\r\n  }, [tasks]);\r\n\r\n  // Function to handle adding a new task from the form submission.\r\n  const addTask = (event) => {\r\n    event.preventDefault(); // Prevents the browser from refreshing when the form is submitted\r\n    if (!task.trim()) return; // Ignore empty tasks\r\n    setTasks([...tasks, { id: Date.now(), text: task, isEditing: false }]);\r\n    setTask(''); // Clear the input field after adding a task\r\n  };\r\n\r\n  // Function to update a task's text.\r\n  const editTask = (id, newText) => {\r\n    const updatedTasks = tasks.map(task => {\r\n      return task.id === id ? { ...task, text: newText } : task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to enable editing mode for a task.\r\n  const startEditing = (id) => {\r\n    const updatedTasks = tasks.map(task => {\r\n      return task.id === id ? { ...task, isEditing: true } : task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to save the edited task and disable editing mode.\r\n  const saveEdit = (id) => {\r\n    const updatedTasks = tasks.map(task => {\r\n      return task.id === id ? { ...task, isEditing: false } : task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to cancel editing mode without saving the task.\r\n  const cancelEdit = (id) => {\r\n    const updatedTasks = tasks.map(task => {\r\n      return task.id === id ? { ...task, isEditing: false } : task;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  // Function to delete a task.\r\n  const deleteTask = (id) => {\r\n    setTasks(tasks.filter(task => task.id !== id)); // Remove the task from the list\r\n  };\r\n\r\n  // Rendering the component to the DOM\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>To-Do List</h1>\r\n        <form onSubmit={addTask}>\r\n          <input\r\n            value={task}\r\n            onChange={(e) => setTask(e.target.value)}\r\n            type=\"text\"\r\n            placeholder=\"Enter a new task\"\r\n            autoFocus // Focus this input automatically when the form appears\r\n          />\r\n          <button type=\"submit\">Add</button>\r\n        </form>\r\n        <ul>\r\n          {tasks.map((task) => (\r\n            <li key={task.id}>\r\n              {task.isEditing ? (\r\n                <div>\r\n                  <input\r\n                    type=\"text\"\r\n                    value={task.text}\r\n                    onChange={(e) => editTask(task.id, e.target.value)}\r\n                    autoFocus\r\n                  />\r\n                  <button onClick={() => saveEdit(task.id)}>Save</button>\r\n                  <button onClick={() => cancelEdit(task.id)}>Cancel</button>\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  {task.text}\r\n                  <button onClick={() => startEditing(task.id)}>Edit</button>\r\n                </div>\r\n              )}\r\n              <button className=\"delete\" onClick={() => deleteTask(task.id)}>\r\n                <FontAwesomeIcon icon={faTrash} /> {/* Icon for delete operation */}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; // Make this component available for import into other files\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}