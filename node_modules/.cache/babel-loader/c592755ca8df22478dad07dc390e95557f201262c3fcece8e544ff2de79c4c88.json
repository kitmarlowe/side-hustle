{"ast":null,"code":"var _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\side-hustle\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Import necessary React features and FontAwesome icons\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Stylesheet for styling the app\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // Component to display icons\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'; // Specific icon for the trash/delete button\n\n// Define the main React functional component called App\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // State: tasks (array of task objects), each with id, text, and isEditing properties\n  const [tasks, setTasks] = useState([]);\n  // State: task (string), stores the current value of the task input field\n  const [task, setTask] = useState('');\n\n  // Effect hook to load tasks from local storage when the component mounts\n  useEffect(() => {\n    const loadedTasks = localStorage.getItem('tasks');\n    // If tasks are found in storage, parse them from JSON string to an array and set them to state\n    if (loadedTasks) {\n      setTasks(JSON.parse(loadedTasks));\n    }\n  }, []); // Empty dependency array, so this runs only once on component mount\n\n  // Effect hook to save the tasks array to local storage whenever tasks state changes\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]); // This effect runs whenever the 'tasks' state changes\n\n  // Function to add a new task\n  const addTask = event => {\n    event.preventDefault(); // Prevents the default form submission behavior which refreshes the page\n    if (!task.trim()) return; // Prevents adding empty or just whitespace tasks\n    // Adds a new task object to the tasks array with unique id, provided text, and not editing\n    setTasks([...tasks, {\n      id: Date.now(),\n      text: task,\n      isEditing: false\n    }]);\n    setTask(''); // Resets the task input field to be empty after adding\n  };\n\n  // Function to update the text of a task\n  const editTask = (id, newText) => {\n    const updatedTasks = tasks.map(task => {\n      // If the task id matches, update its text and keep other properties\n      if (task.id === id) {\n        return {\n          ...task,\n          text: newText\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Set the modified array of tasks to state\n  };\n\n  // Function to toggle the editing state of a task to true\n  const startEditing = id => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          isEditing: true\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Update state to reflect the editing status\n  };\n\n  // Function to save the edited task and toggle the editing state to false\n  const saveEdit = id => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          isEditing: false\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Apply the updates to the tasks state\n  };\n\n  // Function to cancel the edit and toggle the editing state back to false\n  const cancelEdit = id => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return {\n          ...task,\n          isEditing: false\n        };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Update tasks state to cancel edits\n  };\n\n  // Function to remove a task from the array by filtering it out using its id\n  const deleteTask = id => {\n    setTasks(tasks.filter(task => task.id !== id)); // Set the tasks state to only those tasks not being deleted\n  };\n\n  // JSX to render the component in the UI\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"To-Do List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: addTask,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: task,\n          onChange: e => setTask(e.target.value),\n          type: \"text\",\n          placeholder: \"Enter a new task\",\n          autoFocus: true // Automatically focus this input when the component renders\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), \" // Button to submit the form and trigger addTask function\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [task.isEditing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              value: task.text,\n              onChange: e => editTask(task.id, e.target.value),\n              autoFocus: true // Automatically focus this input for editing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => saveEdit(task.id),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 19\n            }, this), \" // Save button for editing\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => cancelEdit(task.id),\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 19\n            }, this), \" // Cancel button for editing\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [task.text, \" // Display the task text\", /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => startEditing(task.id),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 19\n            }, this), \" // Button to start editing\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"delete\",\n            onClick: () => deleteTask(task.id),\n            children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n              icon: faTrash\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 17\n            }, this), \" // Icon for the delete button\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 15\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"xQwwsjMh6FpMANDgxXtpwPlvsf4=\");\n_c = App;\nexport default App; // Export the App component to be used in other parts of the app\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","FontAwesomeIcon","faTrash","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","task","setTask","loadedTasks","localStorage","getItem","JSON","parse","setItem","stringify","addTask","event","preventDefault","trim","id","Date","now","text","isEditing","editTask","newText","updatedTasks","map","startEditing","saveEdit","cancelEdit","deleteTask","filter","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","onChange","e","target","type","placeholder","autoFocus","onClick","icon","_c","$RefreshReg$"],"sources":["C:/xampp/htdocs/side-hustle/src/App.js"],"sourcesContent":["// Import necessary React features and FontAwesome icons\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; // Stylesheet for styling the app\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'; // Component to display icons\nimport { faTrash } from '@fortawesome/free-solid-svg-icons'; // Specific icon for the trash/delete button\n\n// Define the main React functional component called App\nfunction App() {\n  // State: tasks (array of task objects), each with id, text, and isEditing properties\n  const [tasks, setTasks] = useState([]);\n  // State: task (string), stores the current value of the task input field\n  const [task, setTask] = useState('');\n\n  // Effect hook to load tasks from local storage when the component mounts\n  useEffect(() => {\n    const loadedTasks = localStorage.getItem('tasks');\n    // If tasks are found in storage, parse them from JSON string to an array and set them to state\n    if (loadedTasks) {\n      setTasks(JSON.parse(loadedTasks));\n    }\n  }, []); // Empty dependency array, so this runs only once on component mount\n\n  // Effect hook to save the tasks array to local storage whenever tasks state changes\n  useEffect(() => {\n    localStorage.setItem('tasks', JSON.stringify(tasks));\n  }, [tasks]); // This effect runs whenever the 'tasks' state changes\n\n  // Function to add a new task\n  const addTask = (event) => {\n    event.preventDefault(); // Prevents the default form submission behavior which refreshes the page\n    if (!task.trim()) return; // Prevents adding empty or just whitespace tasks\n    // Adds a new task object to the tasks array with unique id, provided text, and not editing\n    setTasks([...tasks, { id: Date.now(), text: task, isEditing: false }]);\n    setTask(''); // Resets the task input field to be empty after adding\n  };\n\n  // Function to update the text of a task\n  const editTask = (id, newText) => {\n    const updatedTasks = tasks.map(task => {\n      // If the task id matches, update its text and keep other properties\n      if (task.id === id) {\n        return { ...task, text: newText };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Set the modified array of tasks to state\n  };\n\n  // Function to toggle the editing state of a task to true\n  const startEditing = (id) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, isEditing: true };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Update state to reflect the editing status\n  };\n\n  // Function to save the edited task and toggle the editing state to false\n  const saveEdit = (id) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, isEditing: false };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Apply the updates to the tasks state\n  };\n\n  // Function to cancel the edit and toggle the editing state back to false\n  const cancelEdit = (id) => {\n    const updatedTasks = tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, isEditing: false };\n      }\n      return task;\n    });\n    setTasks(updatedTasks); // Update tasks state to cancel edits\n  };\n\n  // Function to remove a task from the array by filtering it out using its id\n  const deleteTask = (id) => {\n    setTasks(tasks.filter(task => task.id !== id)); // Set the tasks state to only those tasks not being deleted\n  };\n\n  // JSX to render the component in the UI\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>To-Do List</h1>\n        <form onSubmit={addTask}>\n          <input\n            value={task}\n            onChange={(e) => setTask(e.target.value)}\n            type=\"text\"\n            placeholder=\"Enter a new task\"\n            autoFocus // Automatically focus this input when the component renders\n          />\n          <button type=\"submit\">Add</button> // Button to submit the form and trigger addTask function\n        </form>\n        <ul>\n          {tasks.map((task) => (\n            <li key={task.id}>\n              {task.isEditing ? (\n                <div>\n                  <input\n                    type=\"text\"\n                    value={task.text}\n                    onChange={(e) => editTask(task.id, e.target.value)}\n                    autoFocus // Automatically focus this input for editing\n                  />\n                  <button onClick={() => saveEdit(task.id)}>Save</button> // Save button for editing\n                  <button onClick={() => cancelEdit(task.id)}>Cancel</button> // Cancel button for editing\n                </div>\n              ) : (\n                <div>\n                  {task.text} // Display the task text\n                  <button onClick={() => startEditing(task.id)}>Edit</button> // Button to start editing\n                </div>\n              )}\n              <button className=\"delete\" onClick={() => deleteTask(task.id)}>\n                <FontAwesomeIcon icon={faTrash} /> // Icon for the delete button\n              </button>\n            </li>\n          ))}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App; // Export the App component to be used in other parts of the app\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}